
Boot_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004988  08004988  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08004990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          00000570  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005c4  200005c4  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ca6f  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002199  00000000  00000000  0002cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a80  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000800  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fca6  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e49b  00000000  00000000  0004fbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba5d8  00000000  00000000  0005e091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a74  00000000  00000000  0011866c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0011b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004950 	.word	0x08004950

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08004950 	.word	0x08004950

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <apInit>:
#include "app.h"    


void apInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    gpioInit();
 80004c8:	f000 f81e 	bl	8000508 <gpioInit>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <apMain>:

void apMain(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    uint32_t pre_time;

    gpoOn(BUZZER);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f8fc 	bl	80006d4 <gpoOn>
	delay(500);
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f000 f978 	bl	80007d4 <delay>
	gpoOff(BUZZER);
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 f923 	bl	8000730 <gpoOff>

	while(1)
	{
		// non block time
		if (millis()-pre_time >= 1000)
 80004ea:	f000 f97e 	bl	80007ea <millis>
 80004ee:	4602      	mov	r2, r0
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004f8:	d3f7      	bcc.n	80004ea <apMain+0x1a>
		{
			pre_time = millis();
 80004fa:	f000 f976 	bl	80007ea <millis>
 80004fe:	6078      	str	r0, [r7, #4]

			gpoToggle(DBG_LED);
 8000500:	2001      	movs	r0, #1
 8000502:	f000 f943 	bl	800078c <gpoToggle>
		if (millis()-pre_time >= 1000)
 8000506:	e7f0      	b.n	80004ea <apMain+0x1a>

08000508 <gpioInit>:
		      /*--------------- GPI Table Setting Value-----------------------------*/
		   {USB_PFLT_GPIO_Port,	  USB_PFLT_Pin,   	_DEF_INPUT_PULLDOWN,  false,     GPIO_PIN_SET,   GPIO_PIN_RESET},
       };

bool gpioInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
    bool ret = true;
 800050e:	2301      	movs	r3, #1
 8000510:	70fb      	strb	r3, [r7, #3]

	for (int i=0; i<GPIO_MAX_CH; i++)
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e01e      	b.n	8000556 <gpioInit+0x4e>
	  {
		  gpioPinMode(i, gpio_tbl[i].mode);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	b2d8      	uxtb	r0, r3
 800051c:	4912      	ldr	r1, [pc, #72]	; (8000568 <gpioInit+0x60>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4613      	mov	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	440b      	add	r3, r1
 800052a:	3308      	adds	r3, #8
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	f000 f81c 	bl	800056c <gpioPinMode>
		  gpioPinWrite(i, gpio_tbl[i].init_value);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	b2d8      	uxtb	r0, r3
 8000538:	490b      	ldr	r1, [pc, #44]	; (8000568 <gpioInit+0x60>)
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	4613      	mov	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	440b      	add	r3, r1
 8000546:	3309      	adds	r3, #9
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	f000 f870 	bl	8000630 <gpioPinWrite>
	for (int i=0; i<GPIO_MAX_CH; i++)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b05      	cmp	r3, #5
 800055a:	dddd      	ble.n	8000518 <gpioInit+0x10>

#ifdef _USE_CLI
   cliAdd("GPIO", cliGpio);
#endif

	return ret;
 800055c:	78fb      	ldrb	r3, [r7, #3]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000

0800056c <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 800057c:	2301      	movs	r3, #1
 800057e:	77fb      	strb	r3, [r7, #31]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

	  switch(mode)
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	2b05      	cmp	r3, #5
 8000594:	d82c      	bhi.n	80005f0 <gpioPinMode+0x84>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <gpioPinMode+0x30>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005b5 	.word	0x080005b5
 80005a0:	080005bf 	.word	0x080005bf
 80005a4:	080005c9 	.word	0x080005c9
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005dd 	.word	0x080005dd
 80005b0:	080005e7 	.word	0x080005e7
	  {
	  case _DEF_INPUT:
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
		  break;
 80005bc:	e018      	b.n	80005f0 <gpioPinMode+0x84>

	  case _DEF_INPUT_PULLUP:
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
		  break;
 80005c6:	e013      	b.n	80005f0 <gpioPinMode+0x84>

	  case _DEF_INPUT_PULLDOWN:
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
		  break;
 80005d0:	e00e      	b.n	80005f0 <gpioPinMode+0x84>

	  case _DEF_OUTPUT:
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
		  break;
 80005da:	e009      	b.n	80005f0 <gpioPinMode+0x84>

	  case _DEF_OUTPUT_PULLUP:
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
		  break;
 80005e4:	e004      	b.n	80005f0 <gpioPinMode+0x84>

	  case _DEF_OUTPUT_PULLDOWN:
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
		  break;
 80005ee:	bf00      	nop
	  }

	  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <gpioPinMode+0xc0>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	3304      	adds	r3, #4
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8000604:	79fa      	ldrb	r2, [r7, #7]
 8000606:	4909      	ldr	r1, [pc, #36]	; (800062c <gpioPinMode+0xc0>)
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fde6 	bl	80011ec <HAL_GPIO_Init>

	return ret;
 8000620:	7ffb      	ldrb	r3, [r7, #31]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d840      	bhi.n	80006c8 <gpioPinWrite+0x98>
	{
		return ;
	}

	if(value == true)
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01e      	beq.n	800068a <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on);
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	4920      	ldr	r1, [pc, #128]	; (80006d0 <gpioPinWrite+0xa0>)
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	491c      	ldr	r1, [pc, #112]	; (80006d0 <gpioPinWrite+0xa0>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	3304      	adds	r3, #4
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b299      	uxth	r1, r3
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	4c17      	ldr	r4, [pc, #92]	; (80006d0 <gpioPinWrite+0xa0>)
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4423      	add	r3, r4
 800067e:	330a      	adds	r3, #10
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	f000 ff4e 	bl	8001524 <HAL_GPIO_WritePin>
 8000688:	e01f      	b.n	80006ca <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off);
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	4910      	ldr	r1, [pc, #64]	; (80006d0 <gpioPinWrite+0xa0>)
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <gpioPinWrite+0xa0>)
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	3304      	adds	r3, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b299      	uxth	r1, r3
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	4c07      	ldr	r4, [pc, #28]	; (80006d0 <gpioPinWrite+0xa0>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4423      	add	r3, r4
 80006bc:	330b      	adds	r3, #11
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	f000 ff2f 	bl	8001524 <HAL_GPIO_WritePin>
 80006c6:	e000      	b.n	80006ca <gpioPinWrite+0x9a>
		return ;
 80006c8:	bf00      	nop
	}
}
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	20000000 	.word	0x20000000

080006d4 <gpoOn>:

	return ret;
}

void gpoOn(uint8_t ch) 
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	 if(ch >= GPIO_MAX_CH) return;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d81e      	bhi.n	8000722 <gpoOn+0x4e>
	 HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on);
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	4911      	ldr	r1, [pc, #68]	; (800072c <gpoOn+0x58>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <gpoOn+0x58>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	3304      	adds	r3, #4
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	b299      	uxth	r1, r3
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4c08      	ldr	r4, [pc, #32]	; (800072c <gpoOn+0x58>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4423      	add	r3, r4
 8000716:	330a      	adds	r3, #10
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	f000 ff02 	bl	8001524 <HAL_GPIO_WritePin>
 8000720:	e000      	b.n	8000724 <gpoOn+0x50>
	 if(ch >= GPIO_MAX_CH) return;
 8000722:	bf00      	nop
}
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	20000000 	.word	0x20000000

08000730 <gpoOff>:

void gpoOff(uint8_t ch)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
    if (ch >= GPIO_MAX_CH) return;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b05      	cmp	r3, #5
 800073e:	d81e      	bhi.n	800077e <gpoOff+0x4e>
	HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off);
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	4911      	ldr	r1, [pc, #68]	; (8000788 <gpoOff+0x58>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <gpoOff+0x58>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	3304      	adds	r3, #4
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	b299      	uxth	r1, r3
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	4c08      	ldr	r4, [pc, #32]	; (8000788 <gpoOff+0x58>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4423      	add	r3, r4
 8000772:	330b      	adds	r3, #11
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	f000 fed4 	bl	8001524 <HAL_GPIO_WritePin>
 800077c:	e000      	b.n	8000780 <gpoOff+0x50>
    if (ch >= GPIO_MAX_CH) return;
 800077e:	bf00      	nop
}
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	20000000 	.word	0x20000000

0800078c <gpoToggle>:

void gpoToggle(uint8_t ch)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if (ch >= GPIO_MAX_CH) return;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b05      	cmp	r3, #5
 800079a:	d815      	bhi.n	80007c8 <gpoToggle+0x3c>
	HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 800079c:	79fa      	ldrb	r2, [r7, #7]
 800079e:	490c      	ldr	r1, [pc, #48]	; (80007d0 <gpoToggle+0x44>)
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <gpoToggle+0x44>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	440b      	add	r3, r1
 80007ba:	3304      	adds	r3, #4
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	f000 fec8 	bl	8001556 <HAL_GPIO_TogglePin>
 80007c6:	e000      	b.n	80007ca <gpoToggle+0x3e>
	if (ch >= GPIO_MAX_CH) return;
 80007c8:	bf00      	nop
}
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000

080007d4 <delay>:




void delay(uint32_t time_ms)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_ms);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 fb3d 	bl	8000e5c <HAL_Delay>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <millis>:

uint32_t millis(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80007ee:	f000 fb29 	bl	8000e44 <HAL_GetTick>
 80007f2:	4603      	mov	r3, r0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fabc 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f80c 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 f8cc 	bl	80009a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000808:	f000 f872 	bl	80008f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080c:	f000 f89a 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  
  apInit();
 8000810:	f7ff fe58 	bl	80004c4 <apInit>
  apMain();
 8000814:	f7ff fe5c 	bl	80004d0 <apMain>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000818:	e7fe      	b.n	8000818 <main+0x20>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f864 	bl	80048f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SystemClock_Config+0xd0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800088c:	2319      	movs	r3, #25
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000890:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800089a:	2307      	movs	r3, #7
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fe9c 	bl	80025e0 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ae:	f000 f909 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2105      	movs	r1, #5
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 f8fd 	bl	8002ad0 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008dc:	f000 f8f2 	bl	8000ac4 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART3_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000928:	f002 fab2 	bl	8002e90 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8c7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000070 	.word	0x20000070
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800094e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2204      	movs	r2, #4
 8000954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2201      	movs	r2, #1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	f000 fdff 	bl	800158a <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f897 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b4 	.word	0x200000b4

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3d      	ldr	r2, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O_LED_Pin|O_FAN_Pin|BUZZER_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	211d      	movs	r1, #29
 8000a46:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0x118>)
 8000a48:	f000 fd6c 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PENA_GPIO_Port, USB_PENA_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a54:	f000 fd66 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : O_LED_Pin O_FAN_Pin BUZZER_Pin DBG_LED_Pin */
  GPIO_InitStruct.Pin = O_LED_Pin|O_FAN_Pin|BUZZER_Pin|DBG_LED_Pin;
 8000a58:	231d      	movs	r3, #29
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0x118>)
 8000a70:	f000 fbbc 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PENA_Pin */
  GPIO_InitStruct.Pin = USB_PENA_Pin;
 8000a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PENA_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a8e:	f000 fbad 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PFLT_Pin */
  GPIO_InitStruct.Pin = USB_PFLT_Pin;
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PFLT_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_GPIO_Init+0x120>)
 8000aa8:	f000 fba0 	bl	80011ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_UART_MspInit+0x94>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d134      	bne.n	8000bac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DBG_TX3_Pin|DBG_RX3_Pin;
 8000b7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_UART_MspInit+0x9c>)
 8000b98:	f000 fb28 	bl	80011ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2027      	movs	r0, #39	; 0x27
 8000ba2:	f000 fa5a 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ba6:	2027      	movs	r0, #39	; 0x27
 8000ba8:	f000 fa73 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40004800 	.word	0x40004800
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be0:	d147      	bne.n	8000c72 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DET_Pin;
 8000bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_DET_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <HAL_PCD_MspInit+0xc0>)
 8000c14:	f000 faea 	bl	80011ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000c18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <HAL_PCD_MspInit+0xc0>)
 8000c36:	f000 fad9 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6353      	str	r3, [r2, #52]	; 0x34
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_PCD_MspInit+0xbc>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2043      	movs	r0, #67	; 0x43
 8000c68:	f000 f9f7 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000c6c:	2043      	movs	r0, #67	; 0x43
 8000c6e:	f000 fa10 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8a4 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART3_IRQHandler+0x10>)
 8000cde:	f002 f925 	bl	8002f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000070 	.word	0x20000070

08000cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <OTG_FS_IRQHandler+0x10>)
 8000cf2:	f000 fd67 	bl	80017c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000b4 	.word	0x200000b4

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f003 fdd9 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fd4f 	bl	80007f8 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000d68:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8000d6c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000d70:	200005c4 	.word	0x200005c4

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f94f 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe90 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f967 	bl	80010ae <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f92f 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000048 	.word	0x20000048
 8000e14:	20000050 	.word	0x20000050
 8000e18:	2000004c 	.word	0x2000004c

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000050 	.word	0x20000050
 8000e40:	200005c0 	.word	0x200005c0

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200005c0 	.word	0x200005c0

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000050 	.word	0x20000050

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff29 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff3e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff31 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff feb6 	bl	8000e44 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d008      	beq.n	80010f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e052      	b.n	800119e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0216 	bic.w	r2, r2, #22
 8001106:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001116:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <HAL_DMA_Abort+0x62>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0208 	bic.w	r2, r2, #8
 8001136:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	e013      	b.n	8001172 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114a:	f7ff fe7b 	bl	8000e44 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	d90c      	bls.n	8001172 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e015      	b.n	800119e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e4      	bne.n	800114a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	223f      	movs	r2, #63	; 0x3f
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00c      	b.n	80011de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2205      	movs	r2, #5
 80011c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e16b      	b.n	80014e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 815a 	bne.w	80014da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80b4 	beq.w	80014da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a5f      	ldr	r2, [pc, #380]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a5b      	ldr	r2, [pc, #364]	; (80014fc <HAL_GPIO_Init+0x310>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x314>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x318>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x31c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x320>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x324>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x328>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x330>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x20a>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e00e      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013f6:	2308      	movs	r3, #8
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x310>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_GPIO_Init+0x334>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae90 	bls.w	8001208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40021c00 	.word	0x40021c00
 8001520:	40013c00 	.word	0x40013c00

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	041a      	lsls	r2, r3, #16
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43d9      	mvns	r1, r3
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	400b      	ands	r3, r1
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	619a      	str	r2, [r3, #24]
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800158a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158c:	b08f      	sub	sp, #60	; 0x3c
 800158e:	af0a      	add	r7, sp, #40	; 0x28
 8001590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e10f      	b.n	80017bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fb02 	bl	8000bc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2203      	movs	r2, #3
 80015c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fc70 	bl	8003ec0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	687e      	ldr	r6, [r7, #4]
 80015e8:	466d      	mov	r5, sp
 80015ea:	f106 0410 	add.w	r4, r6, #16
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fe:	1d33      	adds	r3, r6, #4
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f002 fb58 	bl	8003cb8 <USB_CoreInit>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0d0      	b.n	80017bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fc5e 	bl	8003ee2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e04a      	b.n	80016c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	333d      	adds	r3, #61	; 0x3d
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	333c      	adds	r3, #60	; 0x3c
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	b298      	uxth	r0, r3
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3344      	adds	r3, #68	; 0x44
 8001668:	4602      	mov	r2, r0
 800166a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3340      	adds	r3, #64	; 0x40
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3348      	adds	r3, #72	; 0x48
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	334c      	adds	r3, #76	; 0x4c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3354      	adds	r3, #84	; 0x54
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	3301      	adds	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3af      	bcc.n	800162c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e044      	b.n	800175c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3b5      	bcc.n	80016d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	687e      	ldr	r6, [r7, #4]
 800176e:	466d      	mov	r5, sp
 8001770:	f106 0410 	add.w	r4, r6, #16
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001780:	e885 0003 	stmia.w	r5, {r0, r1}
 8001784:	1d33      	adds	r3, r6, #4
 8001786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f002 fbf7 	bl	8003f7c <USB_DevInit>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e00d      	b.n	80017bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 ff27 	bl	8004608 <USB_DevDisconnect>

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08d      	sub	sp, #52	; 0x34
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 ffc8 	bl	8004770 <USB_GetMode>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 848a 	bne.w	80020fc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 ff2c 	bl	800464a <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8480 	beq.w	80020fa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 ff19 	bl	800464a <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b02      	cmp	r3, #2
 8001820:	d107      	bne.n	8001832 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f002 0202 	and.w	r2, r2, #2
 8001830:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 ff07 	bl	800464a <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b10      	cmp	r3, #16
 8001844:	d161      	bne.n	800190a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0210 	bic.w	r2, r2, #16
 8001854:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 020f 	and.w	r2, r3, #15
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	0c5b      	lsrs	r3, r3, #17
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	2b02      	cmp	r3, #2
 8001880:	d124      	bne.n	80018cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d035      	beq.n	80018fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	6a38      	ldr	r0, [r7, #32]
 80018a2:	f002 fe59 	bl	8004558 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b2:	441a      	add	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c4:	441a      	add	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	621a      	str	r2, [r3, #32]
 80018ca:	e016      	b.n	80018fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	0c5b      	lsrs	r3, r3, #17
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	2b06      	cmp	r3, #6
 80018d6:	d110      	bne.n	80018fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018de:	2208      	movs	r2, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	6a38      	ldr	r0, [r7, #32]
 80018e4:	f002 fe38 	bl	8004558 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f4:	441a      	add	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0210 	orr.w	r2, r2, #16
 8001908:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fe9b 	bl	800464a <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800191e:	f040 80a7 	bne.w	8001a70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fea0 	bl	8004670 <USB_ReadDevAllOutEpInterrupt>
 8001930:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001932:	e099      	b.n	8001a68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 808e 	beq.w	8001a5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fec4 	bl	80046d8 <USB_ReadDevOutEPInterrupt>
 8001950:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00c      	beq.n	8001976 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001968:	461a      	mov	r2, r3
 800196a:	2301      	movs	r3, #1
 800196c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800196e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fcfb 	bl	800236c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198c:	461a      	mov	r2, r3
 800198e:	2308      	movs	r3, #8
 8001990:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fdd1 	bl	800253c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b0:	461a      	mov	r2, r3
 80019b2:	2310      	movs	r3, #16
 80019b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d030      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d109      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fbc3 	bl	8002196 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2302      	movs	r3, #2
 8001a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a54:	461a      	mov	r2, r3
 8001a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f47f af62 	bne.w	8001934 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fde8 	bl	800464a <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a84:	f040 80db 	bne.w	8001c3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fe09 	bl	80046a4 <USB_ReadDevAllInEpInterrupt>
 8001a92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a98:	e0cd      	b.n	8001c36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80c2 	beq.w	8001c2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fe2f 	bl	8004714 <USB_ReadDevInEPInterrupt>
 8001ab6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d057      	beq.n	8001b72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2201      	movs	r2, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69f9      	ldr	r1, [r7, #28]
 8001ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af2:	461a      	mov	r2, r3
 8001af4:	2301      	movs	r3, #1
 8001af6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d132      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	334c      	adds	r3, #76	; 0x4c
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4403      	add	r3, r0
 8001b20:	3348      	adds	r3, #72	; 0x48
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4419      	add	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4403      	add	r3, r0
 8001b34:	334c      	adds	r3, #76	; 0x4c
 8001b36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d113      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x3a2>
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3354      	adds	r3, #84	; 0x54
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d108      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2101      	movs	r1, #1
 8001b62:	f002 fe37 	bl	80047d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fad4 	bl	800211a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2340      	movs	r3, #64	; 0x40
 8001bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd2:	6a38      	ldr	r0, [r7, #32]
 8001bd4:	f002 fb36 	bl	8004244 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	3338      	adds	r3, #56	; 0x38
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	78db      	ldrb	r3, [r3, #3]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d108      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fad4 	bl	80021ae <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	2302      	movs	r3, #2
 8001c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb13 	bl	8002250 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f af2e 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fd01 	bl	800464a <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c52:	d122      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fca3 	bl	80025c8 <HAL_PCDEx_LPM_Callback>
 8001c82:	e002      	b.n	8001c8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fa7c 	bl	8002182 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fcd3 	bl	800464a <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cae:	d112      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa54 	bl	800216e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cd4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fcb5 	bl	800464a <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cea:	f040 80b7 	bne.w	8001e5c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2110      	movs	r1, #16
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fa9b 	bl	8004244 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d12:	e046      	b.n	8001da2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d20:	461a      	mov	r2, r3
 8001d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d38:	0151      	lsls	r1, r2, #5
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	440a      	add	r2, r1
 8001d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d54:	461a      	mov	r2, r3
 8001d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6c:	0151      	lsls	r1, r2, #5
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	440a      	add	r2, r1
 8001d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8c:	0151      	lsls	r1, r2, #5
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	440a      	add	r2, r1
 8001d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	3301      	adds	r3, #1
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3b3      	bcc.n	8001d14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001dbe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d016      	beq.n	8001df6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd8:	f043 030b 	orr.w	r3, r3, #11
 8001ddc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dee:	f043 030b 	orr.w	r3, r3, #11
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
 8001df4:	e015      	b.n	8001e22 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e08:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1c:	f043 030b 	orr.w	r3, r3, #11
 8001e20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e46:	461a      	mov	r2, r3
 8001e48:	f002 fcc4 	bl	80047d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fbf2 	bl	800464a <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d124      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fc88 	bl	800478c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 fa5c 	bl	800433e <USB_GetDevSpeed>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	f000 ffc9 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8001e96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f001 ff6b 	bl	8003d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f957 	bl	800215a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fbc2 	bl	800464a <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d10a      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f938 	bl	8002146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f002 0208 	and.w	r2, r2, #8
 8001ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fbad 	bl	800464a <USB_ReadInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d122      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e014      	b.n	8001f36 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f95f 	bl	80021ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3301      	adds	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3e5      	bcc.n	8001f0c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fb80 	bl	800464a <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f54:	d13b      	bne.n	8001fce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e02b      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3340      	adds	r3, #64	; 0x40
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d115      	bne.n	8001fae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da12      	bge.n	8001fae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	333f      	adds	r3, #63	; 0x3f
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f920 	bl	80021ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3ce      	bcc.n	8001f5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fb39 	bl	800464a <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fe2:	d155      	bne.n	8002090 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	e045      	b.n	8002076 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d12e      	bne.n	8002070 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002012:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	da2b      	bge.n	8002070 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002024:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002028:	429a      	cmp	r2, r3
 800202a:	d121      	bne.n	8002070 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206c:	6053      	str	r3, [r2, #4]
            break;
 800206e:	e007      	b.n	8002080 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	429a      	cmp	r2, r3
 800207e:	d3b4      	bcc.n	8001fea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800208e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fad8 	bl	800464a <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d10a      	bne.n	80020bc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f88d 	bl	80021c6 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fac2 	bl	800464a <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d115      	bne.n	80020fc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f879 	bl	80021da <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e000      	b.n	80020fc <HAL_PCD_IRQHandler+0x938>
      return;
 80020fa:	bf00      	nop
    }
  }
}
 80020fc:	3734      	adds	r7, #52	; 0x34
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}

08002102 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da0c      	bge.n	800221c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	3338      	adds	r3, #56	; 0x38
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e00c      	b.n	8002236 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 f8a3 	bl	8004388 <USB_EPStopXfer>
 8002242:	4603      	mov	r3, r0
 8002244:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002246:	7afb      	ldrb	r3, [r7, #11]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af02      	add	r7, sp, #8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3338      	adds	r3, #56	; 0x38
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	429a      	cmp	r2, r3
 8002282:	d901      	bls.n	8002288 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e06c      	b.n	8002362 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	429a      	cmp	r2, r3
 800229c:	d902      	bls.n	80022a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3303      	adds	r3, #3
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ac:	e02b      	b.n	8002306 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d902      	bls.n	80022ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3303      	adds	r3, #3
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	4603      	mov	r3, r0
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f002 f8f7 	bl	80044dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	441a      	add	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	441a      	add	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	429a      	cmp	r2, r3
 800231a:	d809      	bhi.n	8002330 <PCD_WriteEmptyTxFifo+0xe0>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002324:	429a      	cmp	r2, r3
 8002326:	d203      	bcs.n	8002330 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1be      	bne.n	80022ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d811      	bhi.n	8002360 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	2201      	movs	r2, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	43db      	mvns	r3, r3
 8002356:	6939      	ldr	r1, [r7, #16]
 8002358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800235c:	4013      	ands	r3, r2
 800235e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	333c      	adds	r3, #60	; 0x3c
 8002384:	3304      	adds	r3, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d17b      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4a61      	ldr	r2, [pc, #388]	; (8002534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	f240 80b9 	bls.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80b3 	beq.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d4:	6093      	str	r3, [r2, #8]
 80023d6:	e0a7      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2320      	movs	r3, #32
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e098      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8093 	bne.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d90f      	bls.n	800242a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	e07e      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	0159      	lsls	r1, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	440b      	add	r3, r1
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d114      	bne.n	800248c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002474:	461a      	mov	r2, r3
 8002476:	2101      	movs	r1, #1
 8002478:	f002 f9ac 	bl	80047d4 <USB_EP0_OutStart>
 800247c:	e006      	b.n	800248c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fe35 	bl	8002102 <HAL_PCD_DataOutStageCallback>
 8002498:	e046      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a26      	ldr	r2, [pc, #152]	; (8002538 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d124      	bne.n	80024ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	e032      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	2320      	movs	r3, #32
 80024dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fe0c 	bl	8002102 <HAL_PCD_DataOutStageCallback>
 80024ea:	e01d      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d114      	bne.n	800251c <PCD_EP_OutXfrComplete_int+0x1b0>
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002514:	461a      	mov	r2, r3
 8002516:	2100      	movs	r1, #0
 8002518:	f002 f95c 	bl	80047d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fded 	bl	8002102 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	4f54300a 	.word	0x4f54300a
 8002538:	4f54310a 	.word	0x4f54310a

0800253c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	333c      	adds	r3, #60	; 0x3c
 8002554:	3304      	adds	r3, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d90e      	bls.n	8002590 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fdce 	bl	8002132 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d90c      	bls.n	80025b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	f002 f90e 	bl	80047d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	4f54300a 	.word	0x4f54300a

080025c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e267      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d075      	beq.n	80026ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00c      	beq.n	8002624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b85      	ldr	r3, [pc, #532]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	2b08      	cmp	r3, #8
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002622:	d10b      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d05b      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d157      	bne.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e242      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x74>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6c      	ldr	r2, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002678:	4b69      	ldr	r3, [pc, #420]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a68      	ldr	r2, [pc, #416]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fbd4 	bl	8000e44 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fbd0 	bl	8000e44 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e207      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fbc0 	bl	8000e44 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fbbc 	bl	8000e44 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1f3      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1c7      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fb75 	bl	8000e44 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fb71 	bl	8000e44 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1a8      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fb54 	bl	8000e44 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fb50 	bl	8000e44 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e187      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d036      	beq.n	8002838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fb34 	bl	8000e44 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe fb30 	bl	8000e44 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e167      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x200>
 80027fe:	e01b      	b.n	8002838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe fb1d 	bl	8000e44 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e00e      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe fb19 	bl	8000e44 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d907      	bls.n	800282c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e150      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002820:	40023800 	.word	0x40023800
 8002824:	42470000 	.word	0x42470000
 8002828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ea      	bne.n	800280e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8097 	beq.w	8002974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b77      	ldr	r3, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b74      	ldr	r3, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a73      	ldr	r2, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe fad9 	bl	8000e44 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe fad5 	bl	8000e44 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e10c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x2ea>
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e01c      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x30c>
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b55      	ldr	r3, [pc, #340]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a54      	ldr	r2, [pc, #336]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fa9a 	bl	8000e44 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fa96 	bl	8000e44 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0cb      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCC_OscConfig+0x334>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fa84 	bl	8000e44 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe fa80 	bl	8000e44 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0b5      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ee      	bne.n	8002940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a1 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d05c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d141      	bne.n	8002a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fa54 	bl	8000e44 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fa50 	bl	8000e44 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e087      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fa29 	bl	8000e44 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe fa25 	bl	8000e44 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e05c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x416>
 8002a14:	e054      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fa12 	bl	8000e44 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fa0e 	bl	8000e44 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e045      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
 8002a42:	e03d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e038      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d028      	beq.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d121      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cc      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90c      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f940 	bl	8000e44 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe f93c 	bl	8000e44 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d20c      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe f8a0 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08004968 	.word	0x08004968
 8002c94:	20000048 	.word	0x20000048
 8002c98:	2000004c 	.word	0x2000004c

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b090      	sub	sp, #64	; 0x40
 8002ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cac:	2300      	movs	r3, #0
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x40>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	f200 80a1 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cce:	e09b      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cd4:	e09b      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cda:	e098      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d04:	2100      	movs	r1, #0
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d08:	fb03 f201 	mul.w	r2, r3, r1
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d16:	fba0 1202 	umull	r1, r2, r0, r2
 8002d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	4413      	add	r3, r2
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d36:	f7fd fa47 	bl	80001c8 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4613      	mov	r3, r2
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d42:	e053      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	617a      	str	r2, [r7, #20]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d56:	f04f 0b00 	mov.w	fp, #0
 8002d5a:	4652      	mov	r2, sl
 8002d5c:	465b      	mov	r3, fp
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6c:	0150      	lsls	r0, r2, #5
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ebb2 080a 	subs.w	r8, r2, sl
 8002d76:	eb63 090b 	sbc.w	r9, r3, fp
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d92:	eb63 0509 	sbc.w	r5, r3, r9
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	00eb      	lsls	r3, r5, #3
 8002da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da4:	00e2      	lsls	r2, r4, #3
 8002da6:	4614      	mov	r4, r2
 8002da8:	461d      	mov	r5, r3
 8002daa:	eb14 030a 	adds.w	r3, r4, sl
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	eb45 030b 	adc.w	r3, r5, fp
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	028b      	lsls	r3, r1, #10
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dcc:	4621      	mov	r1, r4
 8002dce:	028a      	lsls	r2, r1, #10
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	60fa      	str	r2, [r7, #12]
 8002ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de0:	f7fd f9f2 	bl	80001c8 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3740      	adds	r7, #64	; 0x40
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	017d7840 	.word	0x017d7840

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000048 	.word	0x20000048

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08004978 	.word	0x08004978

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e6c:	f7ff ffdc 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0b5b      	lsrs	r3, r3, #13
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08004978 	.word	0x08004978

08002e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e03f      	b.n	8002f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fe32 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fc7b 	bl	80037d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0ba      	sub	sp, #232	; 0xe8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_UART_IRQHandler+0x66>
 8002f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb65 	bl	800365a <UART_Receive_IT>
      return;
 8002f90:	e256      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80de 	beq.w	8003158 <HAL_UART_IRQHandler+0x22c>
 8002f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80d1 	beq.w	8003158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_UART_IRQHandler+0xae>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xd2>
 8002fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xf6>
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d011      	beq.n	8003052 <HAL_UART_IRQHandler+0x126>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800303a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 81ed 	beq.w	8003436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_UART_IRQHandler+0x14e>
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 faf0 	bl	800365a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_UART_IRQHandler+0x17a>
 800309e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d04f      	beq.n	8003146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9f8 	bl	800349c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d141      	bne.n	800313e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1d9      	bne.n	80030ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_UART_IRQHandler+0x3dc>)
 8003114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f843 	bl	80011a6 <HAL_DMA_Abort_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	e00e      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f99a 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00a      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f996 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e006      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f992 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003152:	e170      	b.n	8003436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	bf00      	nop
    return;
 8003156:	e16e      	b.n	8003436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 814a 	bne.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8143 	beq.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 813c 	beq.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	f040 80b4 	bne.w	800330c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8140 	beq.w	800343a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031c2:	429a      	cmp	r2, r3
 80031c4:	f080 8139 	bcs.w	800343a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	f000 8088 	beq.w	80032ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800320a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e1      	bne.n	800322a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800328a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e3      	bne.n	8003266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	f023 0310 	bic.w	r3, r3, #16
 80032c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd feec 	bl	80010c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8c0 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003304:	e099      	b.n	800343a <HAL_UART_IRQHandler+0x50e>
 8003306:	bf00      	nop
 8003308:	08003563 	.word	0x08003563
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003314:	b29b      	uxth	r3, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 808b 	beq.w	800343e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8086 	beq.w	800343e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003356:	647a      	str	r2, [r7, #68]	; 0x44
 8003358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e3      	bne.n	8003332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	623b      	str	r3, [r7, #32]
   return(result);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800338e:	633a      	str	r2, [r7, #48]	; 0x30
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e3      	bne.n	800336a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0310 	bic.w	r3, r3, #16
 80033c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	617b      	str	r3, [r7, #20]
   return(result);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e3      	bne.n	80033b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f848 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f4:	e023      	b.n	800343e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_UART_IRQHandler+0x4ea>
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8bb 	bl	800358a <UART_Transmit_IT>
    return;
 8003414:	e014      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <HAL_UART_IRQHandler+0x514>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8fb 	bl	800362a <UART_EndTransmit_IT>
    return;
 8003434:	e004      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
    return;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
      return;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
      return;
 800343e:	bf00      	nop
  }
}
 8003440:	37e8      	adds	r7, #232	; 0xe8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b095      	sub	sp, #84	; 0x54
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034c4:	643a      	str	r2, [r7, #64]	; 0x40
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	2b01      	cmp	r3, #1
 8003512:	d119      	bne.n	8003548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	60bb      	str	r3, [r7, #8]
   return(result);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0310 	bic.w	r3, r3, #16
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003534:	61ba      	str	r2, [r7, #24]
 8003536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6979      	ldr	r1, [r7, #20]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	613b      	str	r3, [r7, #16]
   return(result);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003556:	bf00      	nop
 8003558:	3754      	adds	r7, #84	; 0x54
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff ff77 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	d13e      	bne.n	800361c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	d114      	bne.n	80035d2 <UART_Transmit_IT+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d110      	bne.n	80035d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]
 80035d0:	e008      	b.n	80035e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6211      	str	r1, [r2, #32]
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4619      	mov	r1, r3
 80035f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fefc 	bl	8003448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08c      	sub	sp, #48	; 0x30
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b22      	cmp	r3, #34	; 0x22
 800366c:	f040 80ab 	bne.w	80037c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d117      	bne.n	80036aa <UART_Receive_IT+0x50>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d113      	bne.n	80036aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003698:	b29a      	uxth	r2, r3
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
 80036a8:	e026      	b.n	80036f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d007      	beq.n	80036ce <UART_Receive_IT+0x74>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <UART_Receive_IT+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e008      	b.n	80036ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4619      	mov	r1, r3
 8003706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15a      	bne.n	80037c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0220 	bic.w	r2, r2, #32
 800371a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	d135      	bne.n	80037b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	613b      	str	r3, [r7, #16]
   return(result);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f023 0310 	bic.w	r3, r3, #16
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	623a      	str	r2, [r7, #32]
 8003774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	69f9      	ldr	r1, [r7, #28]
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b10      	cmp	r3, #16
 8003792:	d10a      	bne.n	80037aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fe67 	bl	8003484 <HAL_UARTEx_RxEventCallback>
 80037b6:	e002      	b.n	80037be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fe4f 	bl	800345c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e002      	b.n	80037c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3730      	adds	r7, #48	; 0x30
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b0c0      	sub	sp, #256	; 0x100
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	ea40 0301 	orr.w	r3, r0, r1
 80037f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	431a      	orrs	r2, r3
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	431a      	orrs	r2, r3
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003828:	f021 010c 	bic.w	r1, r1, #12
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003836:	430b      	orrs	r3, r1
 8003838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	6999      	ldr	r1, [r3, #24]
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	ea40 0301 	orr.w	r3, r0, r1
 8003856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b8f      	ldr	r3, [pc, #572]	; (8003a9c <UART_SetConfig+0x2cc>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d005      	beq.n	8003870 <UART_SetConfig+0xa0>
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b8d      	ldr	r3, [pc, #564]	; (8003aa0 <UART_SetConfig+0x2d0>)
 800386c:	429a      	cmp	r2, r3
 800386e:	d104      	bne.n	800387a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7ff fafa 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 8003874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003878:	e003      	b.n	8003882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387a:	f7ff fae1 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 800387e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	f040 810c 	bne.w	8003aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003894:	2200      	movs	r2, #0
 8003896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800389a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800389e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	1891      	adds	r1, r2, r2
 80038a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80038aa:	415b      	adcs	r3, r3
 80038ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038b2:	4621      	mov	r1, r4
 80038b4:	eb12 0801 	adds.w	r8, r2, r1
 80038b8:	4629      	mov	r1, r5
 80038ba:	eb43 0901 	adc.w	r9, r3, r1
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d2:	4690      	mov	r8, r2
 80038d4:	4699      	mov	r9, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	eb18 0303 	adds.w	r3, r8, r3
 80038dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038e0:	462b      	mov	r3, r5
 80038e2:	eb49 0303 	adc.w	r3, r9, r3
 80038e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038fe:	460b      	mov	r3, r1
 8003900:	18db      	adds	r3, r3, r3
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
 8003904:	4613      	mov	r3, r2
 8003906:	eb42 0303 	adc.w	r3, r2, r3
 800390a:	657b      	str	r3, [r7, #84]	; 0x54
 800390c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003914:	f7fc fc58 	bl	80001c8 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4b61      	ldr	r3, [pc, #388]	; (8003aa4 <UART_SetConfig+0x2d4>)
 800391e:	fba3 2302 	umull	r2, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	011c      	lsls	r4, r3, #4
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	1891      	adds	r1, r2, r2
 800393e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003940:	415b      	adcs	r3, r3
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003948:	4641      	mov	r1, r8
 800394a:	eb12 0a01 	adds.w	sl, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb43 0b01 	adc.w	fp, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003968:	4692      	mov	sl, r2
 800396a:	469b      	mov	fp, r3
 800396c:	4643      	mov	r3, r8
 800396e:	eb1a 0303 	adds.w	r3, sl, r3
 8003972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003976:	464b      	mov	r3, r9
 8003978:	eb4b 0303 	adc.w	r3, fp, r3
 800397c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800398c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003994:	460b      	mov	r3, r1
 8003996:	18db      	adds	r3, r3, r3
 8003998:	643b      	str	r3, [r7, #64]	; 0x40
 800399a:	4613      	mov	r3, r2
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039aa:	f7fc fc0d 	bl	80001c8 <__aeabi_uldivmod>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <UART_SetConfig+0x2d4>)
 80039b6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2264      	movs	r2, #100	; 0x64
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	1acb      	subs	r3, r1, r3
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <UART_SetConfig+0x2d4>)
 80039cc:	fba3 2302 	umull	r2, r3, r3, r2
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039d8:	441c      	add	r4, r3
 80039da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	1891      	adds	r1, r2, r2
 80039f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039f4:	415b      	adcs	r3, r3
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039fc:	4641      	mov	r1, r8
 80039fe:	1851      	adds	r1, r2, r1
 8003a00:	6339      	str	r1, [r7, #48]	; 0x30
 8003a02:	4649      	mov	r1, r9
 8003a04:	414b      	adcs	r3, r1
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a14:	4659      	mov	r1, fp
 8003a16:	00cb      	lsls	r3, r1, #3
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1e:	4651      	mov	r1, sl
 8003a20:	00ca      	lsls	r2, r1, #3
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a30:	464b      	mov	r3, r9
 8003a32:	460a      	mov	r2, r1
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a50:	460b      	mov	r3, r1
 8003a52:	18db      	adds	r3, r3, r3
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a56:	4613      	mov	r3, r2
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a66:	f7fc fbaf 	bl	80001c8 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <UART_SetConfig+0x2d4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <UART_SetConfig+0x2d4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 0207 	and.w	r2, r3, #7
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4422      	add	r2, r4
 8003a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a98:	e106      	b.n	8003ca8 <UART_SetConfig+0x4d8>
 8003a9a:	bf00      	nop
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003aba:	4642      	mov	r2, r8
 8003abc:	464b      	mov	r3, r9
 8003abe:	1891      	adds	r1, r2, r2
 8003ac0:	6239      	str	r1, [r7, #32]
 8003ac2:	415b      	adcs	r3, r3
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aca:	4641      	mov	r1, r8
 8003acc:	1854      	adds	r4, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb43 0501 	adc.w	r5, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	00eb      	lsls	r3, r5, #3
 8003ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae2:	00e2      	lsls	r2, r4, #3
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	4643      	mov	r3, r8
 8003aea:	18e3      	adds	r3, r4, r3
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003af0:	464b      	mov	r3, r9
 8003af2:	eb45 0303 	adc.w	r3, r5, r3
 8003af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b16:	4629      	mov	r1, r5
 8003b18:	008b      	lsls	r3, r1, #2
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b20:	4621      	mov	r1, r4
 8003b22:	008a      	lsls	r2, r1, #2
 8003b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b28:	f7fc fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4b60      	ldr	r3, [pc, #384]	; (8003cb4 <UART_SetConfig+0x4e4>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	011c      	lsls	r4, r3, #4
 8003b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	61b9      	str	r1, [r7, #24]
 8003b54:	415b      	adcs	r3, r3
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6139      	str	r1, [r7, #16]
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b90:	464b      	mov	r3, r9
 8003b92:	460a      	mov	r2, r1
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	008b      	lsls	r3, r1, #2
 8003bb8:	4641      	mov	r1, r8
 8003bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	008a      	lsls	r2, r1, #2
 8003bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bc6:	f7fc faff 	bl	80001c8 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <UART_SetConfig+0x4e4>)
 8003bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2264      	movs	r2, #100	; 0x64
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	1acb      	subs	r3, r1, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a33      	ldr	r2, [pc, #204]	; (8003cb4 <UART_SetConfig+0x4e4>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf0:	441c      	add	r4, r3
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8003bfa:	677a      	str	r2, [r7, #116]	; 0x74
 8003bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	1891      	adds	r1, r2, r2
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	415b      	adcs	r3, r3
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c10:	4641      	mov	r1, r8
 8003c12:	1851      	adds	r1, r2, r1
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	4649      	mov	r1, r9
 8003c18:	414b      	adcs	r3, r1
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c28:	4659      	mov	r1, fp
 8003c2a:	00cb      	lsls	r3, r1, #3
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c32:	4651      	mov	r1, sl
 8003c34:	00ca      	lsls	r2, r1, #3
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c42:	464b      	mov	r3, r9
 8003c44:	460a      	mov	r2, r1
 8003c46:	eb42 0303 	adc.w	r3, r2, r3
 8003c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	663b      	str	r3, [r7, #96]	; 0x60
 8003c56:	667a      	str	r2, [r7, #100]	; 0x64
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c64:	4649      	mov	r1, r9
 8003c66:	008b      	lsls	r3, r1, #2
 8003c68:	4641      	mov	r1, r8
 8003c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c6e:	4641      	mov	r1, r8
 8003c70:	008a      	lsls	r2, r1, #2
 8003c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c76:	f7fc faa7 	bl	80001c8 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <UART_SetConfig+0x4e4>)
 8003c80:	fba3 1302 	umull	r1, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	2164      	movs	r1, #100	; 0x64
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	3332      	adds	r3, #50	; 0x32
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <UART_SetConfig+0x4e4>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	f003 020f 	and.w	r2, r3, #15
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4422      	add	r2, r4
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb4:	51eb851f 	.word	0x51eb851f

08003cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb8:	b084      	sub	sp, #16
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	f107 001c 	add.w	r0, r7, #28
 8003cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d122      	bne.n	8003d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fdc0 	bl	8004890 <USB_CoreReset>
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e01a      	b.n	8003d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fdb4 	bl	8004890 <USB_CoreReset>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d3e:	e005      	b.n	8003d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10b      	bne.n	8003d6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f043 0206 	orr.w	r2, r3, #6
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d76:	b004      	add	sp, #16
 8003d78:	4770      	bx	lr
	...

08003d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d165      	bne.n	8003e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a41      	ldr	r2, [pc, #260]	; (8003e98 <USB_SetTurnaroundTime+0x11c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0x2a>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <USB_SetTurnaroundTime+0x120>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d202      	bcs.n	8003da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003da0:	230f      	movs	r3, #15
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e062      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a3c      	ldr	r2, [pc, #240]	; (8003e9c <USB_SetTurnaroundTime+0x120>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d306      	bcc.n	8003dbc <USB_SetTurnaroundTime+0x40>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <USB_SetTurnaroundTime+0x124>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d202      	bcs.n	8003dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003db6:	230e      	movs	r3, #14
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e057      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <USB_SetTurnaroundTime+0x124>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d306      	bcc.n	8003dd2 <USB_SetTurnaroundTime+0x56>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a37      	ldr	r2, [pc, #220]	; (8003ea4 <USB_SetTurnaroundTime+0x128>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d202      	bcs.n	8003dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003dcc:	230d      	movs	r3, #13
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e04c      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <USB_SetTurnaroundTime+0x128>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d306      	bcc.n	8003de8 <USB_SetTurnaroundTime+0x6c>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4a32      	ldr	r2, [pc, #200]	; (8003ea8 <USB_SetTurnaroundTime+0x12c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d802      	bhi.n	8003de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003de2:	230c      	movs	r3, #12
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e041      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <USB_SetTurnaroundTime+0x12c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d906      	bls.n	8003dfe <USB_SetTurnaroundTime+0x82>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <USB_SetTurnaroundTime+0x130>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d802      	bhi.n	8003dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003df8:	230b      	movs	r3, #11
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e036      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <USB_SetTurnaroundTime+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d906      	bls.n	8003e14 <USB_SetTurnaroundTime+0x98>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <USB_SetTurnaroundTime+0x134>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e0e:	230a      	movs	r3, #10
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e02b      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <USB_SetTurnaroundTime+0x134>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d906      	bls.n	8003e2a <USB_SetTurnaroundTime+0xae>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <USB_SetTurnaroundTime+0x138>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d202      	bcs.n	8003e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e24:	2309      	movs	r3, #9
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e020      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <USB_SetTurnaroundTime+0x138>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d306      	bcc.n	8003e40 <USB_SetTurnaroundTime+0xc4>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <USB_SetTurnaroundTime+0x13c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d802      	bhi.n	8003e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e015      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <USB_SetTurnaroundTime+0x13c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d906      	bls.n	8003e56 <USB_SetTurnaroundTime+0xda>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <USB_SetTurnaroundTime+0x140>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d202      	bcs.n	8003e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e50:	2307      	movs	r3, #7
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00a      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e56:	2306      	movs	r3, #6
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e007      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e62:	2309      	movs	r3, #9
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e001      	b.n	8003e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e68:	2309      	movs	r3, #9
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	00d8acbf 	.word	0x00d8acbf
 8003e9c:	00e4e1c0 	.word	0x00e4e1c0
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	01067380 	.word	0x01067380
 8003ea8:	011a499f 	.word	0x011a499f
 8003eac:	01312cff 	.word	0x01312cff
 8003eb0:	014ca43f 	.word	0x014ca43f
 8003eb4:	016e3600 	.word	0x016e3600
 8003eb8:	01a6ab1f 	.word	0x01a6ab1f
 8003ebc:	01e84800 	.word	0x01e84800

08003ec0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 0201 	bic.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d115      	bne.n	8003f30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fc ffa3 	bl	8000e5c <HAL_Delay>
      ms++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fc27 	bl	8004770 <USB_GetMode>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d01e      	beq.n	8003f66 <USB_SetCurrentMode+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b31      	cmp	r3, #49	; 0x31
 8003f2c:	d9f0      	bls.n	8003f10 <USB_SetCurrentMode+0x2e>
 8003f2e:	e01a      	b.n	8003f66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f42:	2001      	movs	r0, #1
 8003f44:	f7fc ff8a 	bl	8000e5c <HAL_Delay>
      ms++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fc0e 	bl	8004770 <USB_GetMode>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <USB_SetCurrentMode+0x84>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b31      	cmp	r3, #49	; 0x31
 8003f5e:	d9f0      	bls.n	8003f42 <USB_SetCurrentMode+0x60>
 8003f60:	e001      	b.n	8003f66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e005      	b.n	8003f72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b32      	cmp	r3, #50	; 0x32
 8003f6a:	d101      	bne.n	8003f70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e009      	b.n	8003fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3340      	adds	r3, #64	; 0x40
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3301      	adds	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b0e      	cmp	r3, #14
 8003fb4:	d9f2      	bls.n	8003f9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11c      	bne.n	8003ff6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff4:	e00b      	b.n	800400e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004014:	461a      	mov	r2, r3
 8004016:	2300      	movs	r3, #0
 8004018:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	4619      	mov	r1, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004028:	461a      	mov	r2, r3
 800402a:	680b      	ldr	r3, [r1, #0]
 800402c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10c      	bne.n	800404e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800403a:	2100      	movs	r1, #0
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f965 	bl	800430c <USB_SetDevSpeed>
 8004042:	e008      	b.n	8004056 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004044:	2101      	movs	r1, #1
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f960 	bl	800430c <USB_SetDevSpeed>
 800404c:	e003      	b.n	8004056 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800404e:	2103      	movs	r1, #3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f95b 	bl	800430c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004056:	2110      	movs	r1, #16
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f8f3 	bl	8004244 <USB_FlushTxFifo>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f91f 	bl	80042ac <USB_FlushRxFifo>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	e043      	b.n	800412a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040b8:	d118      	bne.n	80040ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	461a      	mov	r2, r3
 80040ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e013      	b.n	80040fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	461a      	mov	r2, r3
 80040e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e008      	b.n	80040fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	461a      	mov	r2, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	461a      	mov	r2, r3
 800411e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3301      	adds	r3, #1
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d3b7      	bcc.n	80040a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e043      	b.n	80041c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800414a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414e:	d118      	bne.n	8004182 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	461a      	mov	r2, r3
 8004164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e013      	b.n	8004194 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e008      	b.n	8004194 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2300      	movs	r3, #0
 8004192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	461a      	mov	r2, r3
 80041a2:	2300      	movs	r3, #0
 80041a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3301      	adds	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3b7      	bcc.n	8004138 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f043 0210 	orr.w	r2, r3, #16
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <USB_DevInit+0x2c4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f043 0208 	orr.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800421a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800423c:	b004      	add	sp, #16
 800423e:	4770      	bx	lr
 8004240:	803c3800 	.word	0x803c3800

08004244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <USB_FlushTxFifo+0x64>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e01b      	b.n	800429c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	daf2      	bge.n	8004252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	019b      	lsls	r3, r3, #6
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <USB_FlushTxFifo+0x64>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e006      	b.n	800429c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b20      	cmp	r3, #32
 8004298:	d0f0      	beq.n	800427c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	00030d40 	.word	0x00030d40

080042ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <USB_FlushRxFifo+0x5c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e018      	b.n	80042fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	daf2      	bge.n	80042b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2210      	movs	r2, #16
 80042da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <USB_FlushRxFifo+0x5c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e006      	b.n	80042fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d0f0      	beq.n	80042dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	00030d40 	.word	0x00030d40

0800430c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0306 	and.w	r3, r3, #6
 8004356:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
 8004362:	e00a      	b.n	800437a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d002      	beq.n	8004370 <USB_GetDevSpeed+0x32>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d102      	bne.n	8004376 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004370:	2302      	movs	r3, #2
 8004372:	75fb      	strb	r3, [r7, #23]
 8004374:	e001      	b.n	800437a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004376:	230f      	movs	r3, #15
 8004378:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d14a      	bne.n	800443c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043be:	f040 8086 	bne.w	80044ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f242 7210 	movw	r2, #10000	; 0x2710
 8004416:	4293      	cmp	r3, r2
 8004418:	d902      	bls.n	8004420 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
          break;
 800441e:	e056      	b.n	80044ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004438:	d0e7      	beq.n	800440a <USB_EPStopXfer+0x82>
 800443a:	e048      	b.n	80044ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004454:	d13b      	bne.n	80044ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004478:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800449c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d902      	bls.n	80044b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
          break;
 80044b2:	e00c      	b.n	80044ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044cc:	d0e7      	beq.n	800449e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	460b      	mov	r3, r1
 80044ec:	71fb      	strb	r3, [r7, #7]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d123      	bne.n	800454a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004502:	88bb      	ldrh	r3, [r7, #4]
 8004504:	3303      	adds	r3, #3
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	e018      	b.n	8004542 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	031a      	lsls	r2, r3, #12
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451c:	461a      	mov	r2, r3
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3301      	adds	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	3301      	adds	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3e2      	bcc.n	8004510 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3724      	adds	r7, #36	; 0x24
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004558:	b480      	push	{r7}
 800455a:	b08b      	sub	sp, #44	; 0x2c
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	b29b      	uxth	r3, r3
 8004574:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	e014      	b.n	80045ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	3301      	adds	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	3301      	adds	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3301      	adds	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	3301      	adds	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	3301      	adds	r3, #1
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d3e6      	bcc.n	8004584 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045b6:	8bfb      	ldrh	r3, [r7, #30]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01e      	beq.n	80045fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	461a      	mov	r2, r3
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	701a      	strb	r2, [r3, #0]
      i++;
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	3301      	adds	r3, #1
 80045e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	3301      	adds	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80045ee:	8bfb      	ldrh	r3, [r7, #30]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045f4:	8bfb      	ldrh	r3, [r7, #30]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ea      	bne.n	80045d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	372c      	adds	r7, #44	; 0x2c
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	0c1b      	lsrs	r3, r3, #16
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	b29b      	uxth	r3, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004706:	68bb      	ldr	r3, [r7, #8]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	01db      	lsls	r3, r3, #7
 8004746:	b2db      	uxtb	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004762:	68bb      	ldr	r3, [r7, #8]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0301 	and.w	r3, r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	460b      	mov	r3, r1
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	333c      	adds	r3, #60	; 0x3c
 80047ea:	3304      	adds	r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <USB_EP0_OutStart+0xb8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d90a      	bls.n	800480e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004808:	d101      	bne.n	800480e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e037      	b.n	800487e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800482c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800483c:	f043 0318 	orr.w	r3, r3, #24
 8004840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004854:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004856:	7afb      	ldrb	r3, [r7, #11]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10f      	bne.n	800487c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004876:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800487a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	4f54300a 	.word	0x4f54300a

08004890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <USB_CoreReset+0x64>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e01b      	b.n	80048e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	daf2      	bge.n	800489c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <USB_CoreReset+0x64>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e006      	b.n	80048e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d0f0      	beq.n	80048c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	00030d40 	.word	0x00030d40

080048f8 <memset>:
 80048f8:	4402      	add	r2, r0
 80048fa:	4603      	mov	r3, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4d0d      	ldr	r5, [pc, #52]	; (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	; (8004944 <__libc_init_array+0x3c>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2600      	movs	r6, #0
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4d0b      	ldr	r5, [pc, #44]	; (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	; (800494c <__libc_init_array+0x44>)
 800491c:	f000 f818 	bl	8004950 <_init>
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2600      	movs	r6, #0
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08004988 	.word	0x08004988
 8004944:	08004988 	.word	0x08004988
 8004948:	08004988 	.word	0x08004988
 800494c:	0800498c 	.word	0x0800498c

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
